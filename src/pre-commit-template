#!/usr/bin/env python

"""
This module is designed to pre-validate staged git files for sensitive information like AWS credentials,
ensuring that required commands are installed, and that files are accessible and clean before committing.
"""

import os
import sys
import subprocess  # nosec B404
import shutil

REQUIRED_COMMANDS: list[str] = ['git']  # Commands that are necessary for this script to run properly


def process_filtered_files(filtered_files) -> None:
    """
    Process the list of filtered files to search for sensitive AWS credentials.
    """
    errors_verbose: list = []
    errors = 0

    for ff in filtered_files:
        print(f"Processing: {ff}")

    if errors == 0:
        return

    print("Files to be committed contain possible sensitive information:\n%s",
          "\n".join(errors_verbose))
    sys.exit(1)


def filter_staged_files(staged_files) -> None:
    """
    Filter staged files for those that are readable.
    """
    filtered_files: list = [st for st in staged_files if os.access(st, os.R_OK)]
    if filtered_files:
        process_filtered_files(filtered_files)
    else:
        print("No readable staged files found.")


def get_repo_root(git_path: str) -> str:
    """
    Identifies the root directory of the Git repository by querying Git's environment.
    Returns the absolute path of the repository's root.

    Returns:
        str: The path to the repository root.
    """
    try:
        result: subprocess.CompletedProcess[str] = subprocess.run(  # nosec B603
            [git_path, 'rev-parse', '--git-dir'], stderr=subprocess.STDOUT,
            check=True, text=True, stdout=subprocess.PIPE)

        if result.returncode != 0:
            print("Not a git repository (or any of the parent directories).")
            sys.exit(1)

        git_dir: str = result.stdout.strip()
        git_dir = os.path.abspath(git_dir)

    except subprocess.CalledProcessError:
        print("Not a git repository (or any of the parent directories).")
        sys.exit(1)

    return os.path.dirname(git_dir) if os.path.basename(git_dir) == '.git' else git_dir


def list_staged_files(git_path: str) -> list[str]:
    """
    List all staged files in the current git repository.
    """
    repo_root: str = get_repo_root(git_path)
    os.chdir(repo_root)

    try:
        result: subprocess.CompletedProcess[str] = subprocess.run(  # nosec B60
                [git_path, 'diff', '--cached', '--name-only', '--diff-filter=ACM'],
                check=True, text=True, stdout=subprocess.PIPE)
        staged_files: list[str] = result.stdout.split()
        return staged_files
    except subprocess.CalledProcessError:
        print("Failed to list staged files.")
        sys.exit(1)


def check_prerequisites() -> dict:
    """
    Ensure that all required commands are installed and available in the PATH.
    """
    errors = 0
    errors_verbose: list = []
    command_paths: dict = {}

    for command in REQUIRED_COMMANDS:
        full_path: str | None = shutil.which(command)
        if full_path is None:
            errors += 1
            errors_verbose.append(f"{command} is not installed - Aborting")
        else:
            command_paths[command] = full_path

    if errors == 0:
        return command_paths

    print(f"There were {errors} error(s)")

    for err in errors_verbose:
        print(err)
    sys.exit(1)


def main() -> None:
    """
    Main function to run the script.
    """
    command_paths: dict = check_prerequisites()
    git_path: str = command_paths['git']

    staged_files: list[str] = list_staged_files(git_path)
    filter_staged_files(staged_files)


if __name__ == "__main__":
    main()
